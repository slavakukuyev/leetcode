// Generated by CodiumAI

import { numberInWords } from './number_in_words';

describe('numberInWords', () => {
  // Should return correct words for single digit numbers
  it('should return correct words for single digit numbers', () => {
    expect(numberInWords("1")).toBe("one");
    expect(numberInWords("2")).toBe("two");
    expect(numberInWords("3")).toBe("three");
    expect(numberInWords("4")).toBe("four");
    expect(numberInWords("5")).toBe("five");
    expect(numberInWords("6")).toBe("six");
    expect(numberInWords("7")).toBe("seven");
    expect(numberInWords("8")).toBe("eight");
    expect(numberInWords("9")).toBe("nine");
  });


  // Returns the correct word representation of a two digit number
  it('should return the correct word representation of a two digit number', () => {
    expect(numberInWords("23")).toBe("twenty three");
  });


  // Returns the correct word representation of a three digit number
  it('should return the correct word representation of a three digit number', () => {
    expect(numberInWords("123")).toBe("one hundred twenty three");
  });


  // Returns the correct word representation of a single digit number
  it('should return the word representation of a single digit number', () => {
    expect(numberInWords('1')).toBe('one');
    expect(numberInWords('2')).toBe('two');
    expect(numberInWords('3')).toBe('three');
    expect(numberInWords('4')).toBe('four');
    expect(numberInWords('5')).toBe('five');
    expect(numberInWords('6')).toBe('six');
    expect(numberInWords('7')).toBe('seven');
    expect(numberInWords('8')).toBe('eight');
    expect(numberInWords('9')).toBe('nine');
  });


  // Returns the correct word representation of a large number with multiple sets of three digits
  it('should return the correct word representation of a large number with multiple sets of three digits', () => {
    expect(numberInWords("123456789")).toBe("one hundred twenty three million four hundred fifty six thousand seven hundred eighty nine");
  });


  // Returns the correct word representation of a large number with trailing zeros
  it('should return the correct word representation of a large number with trailing zeros', () => {
    expect(numberInWords("1000000000000000000000000")).toBe("one septillion");
  });


  // Returns the correct word representation of the number 0
  it('should return \'zero\' when input is \'0\'', () => {
    expect(numberInWords('0')).toBe('zero');
  });


  // Returns the correct word representation of the number 1000
  it('should return "one thousand" when input is "1000"', () => {
    expect(numberInWords('1000')).toBe('one thousand');
  });


  // Returns the correct word representation of the number 1000000
  it('should return "one million" when input is "1000000"', () => {
    expect(numberInWords('1000000')).toBe('one million');
  });


  // Returns the correct word representation of the number 1000000000
  it('should return \'one billion\' when the input is \'1000000000\'', () => {
    expect(numberInWords('1000000000')).toBe('one billion');
  });


  // Returns the correct word representation of the number 1000000000000
  it('should return "one trillion" when input is "1000000000000"', () => {
    expect(numberInWords('1000000000000')).toBe('one trillion');
  });


  // Returns an empty string when given an empty string input
  it('should return an empty string when given an empty string input', () => {
    expect(numberInWords("")).toEqual("Invalid input");
  });


  // Returns an error message when given a non-numeric input
  it('should return an error message when given a non-numeric input', () => {
    expect( numberInWords("abc")).toEqual("Invalid input");
  });


  // Returns the correct word representation of a negative number
  it('should return the correct word representation of a negative number', () => {
    expect(numberInWords("-123456789")).toBe("negative one hundred twenty three million four hundred fifty six thousand seven hundred eighty nine");
  });


  // Returns the correct word representation of a number with leading and trailing zeros
  it('should return the correct word representation of a number with leading and trailing zeros', () => {
    expect(numberInWords("000123000")).toBe("one hundred twenty three thousand");
  });


  // Returns the correct word representation of a number with leading zeros
  it('should return the correct word representation of a number with leading zeros', () => {
    expect(numberInWords("001")).toBe("one");
    expect(numberInWords("002")).toBe("two");
    expect(numberInWords("003")).toBe("three");
    expect(numberInWords("004")).toBe("four");
    expect(numberInWords("005")).toBe("five");
    expect(numberInWords("006")).toBe("six");
    expect(numberInWords("007")).toBe("seven");
    expect(numberInWords("008")).toBe("eight");
    expect(numberInWords("009")).toBe("nine");
  });
});
